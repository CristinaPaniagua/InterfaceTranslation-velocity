// Auto generated
package eu.generator.resources;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.generator.consumer.ResponseDTO_C0;
import eu.generator.provider.ResponseDTO_P0;
import java.io.IOException;
import java.lang.Exception;
import java.lang.String;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/interface")
public class RESTResources {

#if($method=="GET")
  @GET
  @Path("$path")
  @Produces(MediaType.APPLICATION_${encoding})
 
  
  #if($encoding=="CBOR")
	public byte[] $id() throws IOException {
		byte[] response_out=null;
		CBORFactory f = new CBORFactory();
		ObjectMapper objMapper_Response = new ObjectMapper(f);
            		
  
  #else
	public String $id() throws IOException {
		String response_out=" ";
		ResponseDTO_P0 response=new ResponseDTO_P0();
	  #if($encoding=="JSON")
		JsonFactory jsonFactory_objMapper_Response = new JsonFactory();
		ObjectMapper objMapper_Response=new ObjectMapper(jsonFactory_objMapper_Response);
	  #elseif($encoding=="XML")
		ObjectMapper objMapper_Response=new XmlMapper();
	  #else
			//TODO rest of encodings
	  #end
		try {
			String payload=null;
			response=ProviderInterpreter.consumeService("$url",payload);
			}
		catch (Exception e) {
			e.printStackTrace();
		}
	
			ResponseDTO_C0 response_C=new ResponseDTO_C0();
	
			PayloadTranslator pt= new PayloadTranslator();
			response_C= pt.responseAdaptor(response);
	 
		if(response==null) {
			return response_out;
		}
		else {
	
	#if($encoding=="CBOR")
		response_out= objMapper_Response.writeValueAsBytes(response_C);
	#else
		response_out= objMapper_Response.writeValueAsString(response_C);
	#end	
		return response_out;
		}
  }
  
  #end
    #else
	//TODO post/put/delete methods
  #end
  }